#include "project-inc.FDL"

feature "Product Management" {

heading "Product Management"

    sequence "View Products" {
        NavigateToDashboard: Admin -> "Dashboard Page"
        NavigateToDashboard: Editor -> "Dashboard Page"
        ClickViewProductsButton(button): Admin -> "Dashboard Page"
        ClickViewProductsButton(button): Editor -> "Dashboard Page"
        NavigateToProductsList: Admin -> "Dashboard Page" -> "View Products Page"
        NavigateToProductsList: Editor -> "Dashboard Page" -> "View Products Page"
        RequestViewProductsList: "View Products Page" -> "Products Server"
        GetViewProducts: "Products Server" -> "Database"
        ReturnViewProducts(products): "Products Server" <- "Database"
        ReturnProducts: "View Products Page" <- "Products Server"

        #ifndef emptyViewProducts
            
            DisplayProducts: "Dashboard Page" -> "Dashboard Page"

        #else

            DisplayErr: "Products Page" -> "Products Page"

        #endif /* emptyViewProducts */
    } /* View Products */

    sequence "Manage Reviews" {
        NavigateToDashboard: Admin -> "Dashboard Page"
        NavigateToDashboard: Editor -> "Dashboard Page"
        ClickManageReviewsButton(button): Admin -> "Dashboard Page"
        ClickManageReviewsButton(button): Editor -> "Dashboard Page"
        NavigateToReviewsList: Admin -> "Dashboard Page" -> "Manage Reviews Page"
        NavigateToReviewsList: Editor -> "Dashboard Page" -> "Manage Reviews Page"
        RequestReviewsList: "Manage Reviews Page" -> "Review Server"
        GetReviewsList: "Review Server" -> "Database"
        ReturnReviewsList(username, reviewBox): "Review Server" <- "Database"

        #ifndef reviewsNotVerified
            
            RequestReviewStatus(data): "Manage Reviews Page" -> "Review Server"
            GetReviewStatus: "Manage Reviews Page" <- "Review Server"
            ClickApproveRejectButton(button): Admin -> "Manage Reviews Page"
            ClickApproveRejectButton(button): Editor -> "Manage Reviews Page"
            DisplayMessage: "Manage Reviews Page" -> "Manage Reviews Page"

            #ifndef userHasNoPermission

                PermissionsValid: "Review Server" <- "Authentication"
                ManageReviews(data): "Review Server" -> "Database"
                ReturnNewReview(review): "Review Server" <- "Database"
                RedirectToReviewList: "Review Server" -> "Manage Reviews Page"

            #else 

                ReturnUnauthorisedError: "Review Server" -> "Manage Reviews Page"
                DisplayErr: "Manage Reviews Page" -> "Manage Reviews Page"

            #endif /* userHasPermission */

        #else 

            DisplayErr: "Manage Reviews Page" -> "Manage Reviews Page"

        #endif /* reviewsNotVerified */
    } /* Manage Reviews */

    sequence "Manage Shipment" {
        NavigateToDashboard: Admin -> "Dashboard Page"
        NavigateToDashboard: Editor -> "Dashboard Page"
        ClickManageShipmentsButton(button): Admin -> "Dashboard Page"
        ClickManageShipmentsButton(button): Editor -> "Dashboard Page"
        NavigateToShipmentsList: Admin -> "Dashboard Page" -> "Manage Shipments Page"
        NavigateToShipmentsList: Editor -> "Dashboard Page" -> "Manage Shipments Page"
        RequestShipmentsList: "Manage Shipments Page" -> "Shipments Server"
        GetShipmentsList: "Shipments Server" -> "Database"
        ReturnShipmentsList(startLocation, leftHubTime, pickedUpDelivery, lastStatus): "Shipments Server" <- "Database"

        #ifndef emptyShipmentList
            
            SendShipmentsBack(shipments): "Shipments Server" -> "Manage Shipments Page"
            RenderShipments(shipments): "Manage Shipments Page" -> "Manage Shipments Page"

        #else

            SendShipmentsBack(empty array): "Manage Shipments Page" -> "Manage Shipments Page"
            DisplayErr: "Manage Shipments Page" -> "Manage Shipments Page"

        #endif /* emptyShipmentList */
    } /* Manage Shipment */
}